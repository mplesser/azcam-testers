{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for azcam_testers azcam-testers is an azcam extension for image sensor characterization. Documentation See https://mplesser.github.io/azcam-testers/ Tester Classes Testers Report Commands The report commands are helpful when generating reports. Reports","title":"Documentation for azcam_testers"},{"location":"#documentation-for-azcam_testers","text":"azcam-testers is an azcam extension for image sensor characterization.","title":"Documentation for azcam_testers"},{"location":"#documentation","text":"See https://mplesser.github.io/azcam-testers/","title":"Documentation"},{"location":"#tester-classes","text":"Testers","title":"Tester Classes"},{"location":"#report-commands","text":"The report commands are helpful when generating reports. Reports","title":"Report Commands"},{"location":"report/","text":"Report Commands The report commands are helpful when generating reports. Usage Example: from azcam_testers import report report . make_rstfile ( \"rstfile.rst\" ) azcam_testers.report Report generation class. Report Report generation methods. __init__ ( self ) special make_mdfile ( self , md_file , lines = []) Create a markdown file from lines. make_rstfile ( self , rst_file , lines = []) Create an RST file from lines. md2pdf ( self , filename , options = [], create_html = False ) Create a PDF from a markdown file. Filename extension is optional. Optionally also create an html file. merge_pdf ( self , input_files = [], output_file = 'combined.pdf' ) Merge multiple PDF files into one. rst2pdf ( self , filename , options = []) Create a PDF from an RST file. Filename extension is optional. Also create an html file (currently required).","title":"Report Commands"},{"location":"report/#report-commands","text":"The report commands are helpful when generating reports. Usage Example: from azcam_testers import report report . make_rstfile ( \"rstfile.rst\" )","title":"Report Commands"},{"location":"report/#azcam_testers.report","text":"Report generation class.","title":"report"},{"location":"report/#azcam_testers.report.Report","text":"Report generation methods.","title":"Report"},{"location":"testers/","text":"Tester Classes These classes acquire and analyze image sensor characterization data. Usage Example: from azcam_testers import bias bias . acquire () bias . analyze () Tester azcam_testers.basetester Tester Base class inherited by all tester classes. __init__ ( self , obj_id = 'tester' , name = None ) special acquire ( self ) Acquire data. analyze ( self ) Analyze data. read_datafile ( self , filename = 'default' ) Read data file and set object as valid. report ( self ) Generate a report. write_datafile ( self ) Write data file as a json dump. Note: numpy.array(x).tolist() may be useful for dataset. write_report ( self , report_file , lines = []) Create report file. azcam_testers.detchar DetChar Base DetChar class. __init__ ( self , obj_id = 'detchar' ) special initdata ( self , serial_number =- 1 ) Initialize data taking for new sensor. write_report ( self , report_file , lines = []) Create report file. azcam_testers.bias.Bias Bias (zero) image acquisition and analysis. __init__ ( self ) special acquire ( self ) Acquire bias image sets for bias measurement. analyze ( self ) Analyze an existing bias series. Creates a superbias and a debiased image. The superbias image is the median combined iamge and the debiased image is then overscan corrected. report ( self ) Write bias report file. azcam_testers.dark.Dark Dark signal acquisition and analysis. __init__ ( self ) special acquire ( self ) Acquire dark image sets (1 sec dark, long dark) for a dark current measurement. NumberImages is the number of iamge sets to take. ExposureTime is the exposure time of dark image in seconds. analyze ( self ) Analyze an exisiting series zeros and darks for dark current measurement. plot ( self ) Plot analysis results. report ( self ) Write report file. azcam_testers.defects.Defects Find and quantify image azcam.api.defects. __init__ ( self ) special analyze ( self ) Find dark defects in a flat/superflat image. analyze_bright_defects ( self ) Find bright defects in dark signal image. analyze_dark_defects ( self ) Find dark defects in a flat/superflat image. copy_data_files ( self , folder = '' ) Copy data files to proper report folder. find_section ( self , x_coord , y_coord , num_sections_vertical , num_sections_horizontal , vertical_pixels , horizontal_pixels ) Find the section the group of bad pixels resides in based off a coordinate in the group. Can be used for any number of horizontal and vertical sections. get_defect_coords ( self , mask_in ) Get the coordinates [col,row] of defects, not including edge mask. make_bright_defects_report ( self ) Write bright defects report file. make_dark_defects_report ( self ) Write dark defects report file. make_defects_mask ( self ) Create a single mask from Edge Mask, Bright mask, and Dark mask. Execute AFTER dark and bright defects are found. make_edge_mask ( self , ImageBuffer , EdgeSize =- 1 ) Creates a masked image from ImageBuffer which has its edges masked. Inp: EdgeSize (or self.EdgeSize) is the integer number of pixels closest to edge to mask. Out: self.MaskedImage is a numpy masked image array with edges masked set to True. Out: self.EdgeMask is the numpy mask array associated with self. MaskedImage. plot_defects_mask ( self ) Plot the defective pixel mask. read_defects_mask ( self , filename = '' ) Read a defects mask (FITS format). report ( self ) Write defects report file for Bright and Dark. Run only after all analysis has been completed. azcam_testers.detcal.DetCal Detector calibration routines to: - find and set video offsets - find exposure levels in DN and electrons at specified wavelengths - find system gains - read diode flux calibration data __init__ ( self ) special calibrate ( self ) Use gain data to find offsets and gain. Take images at each wavelength to get count levels. If no wavelength are specified, only calibrate current wavelength read_datafile ( self , filename = 'default' ) Read data file and set object as valid. azcam_testers.eper.Eper EPER - Extended Pixel Edge Response analysis. __init__ ( self ) special acquire ( self ) Not supported, use superflat image set analyze ( self ) Analyze an exisiting SuperFlat image set for EPER. report ( self ) Write report file. azcam_testers.fe55.Fe55 Fe55 X-ray signal acquisition and analysis. __init__ ( self ) special acquire ( self ) Acquire x-ray images for a CTE, gain, and noise measurements. NumberImages is the number of images to take. ExposureTime is the exposure time of x-ray image in seconds. analyze ( self , filename = '' ) Analyze an exisiting Fe55 image sequence or a single image. plot ( self ) Make plots. report ( self ) Write dark report file. azcam_testers.gain.Gain Acquire and analyze gain (PTC point) data. __init__ ( self ) special acquire ( self ) Acquire a bias image and two flat field images to generate a PTC point. ExposureTime is the exposure time in seconds. analyze ( self ) Analyze a bias image and two flat field images to generate a PTC point. fe55_gain ( self ) Set gain.system_gain to azcam.api.fe55.system_gain values. find ( self ) Acquire and Analyze a PTC point for find gain, noise, scale, and offset. Does not create a report during analysis. get_system_gain ( self ) Returns the system gain. measure_gain ( self , Zero , Flat1 , Flat2 , Dark = None ) Calculate gain and noise from a bias and photon transfer image pair. report ( self ) Make report files. azcam_testers.linearity.Linearity Linearity acquisition and analysis. __init__ ( self ) special acquire ( self , NumberExposures = 'prompt' , max_exposure = 'prompt' ) Acquire a series of flats at increasing exposure levels to determine lnearity. Assumes that filename, timing code, and binning are already set as desired. NumberExposures is the number of exposure levels in sequence max_exposure is the maximum exposure time in seconds. analyze ( self ) Analyze a series of flats which have already been taken for linearity. fit_linearity ( self , fit_min =- 1 , fit_max =- 1 ) Calculate residuals from linearity data. Creates linearity.txt file. plot ( self , MinPoint = 0 , MaxPoint =- 1 , MinSpec =- 1 , MaxSpec =- 1 ) Plot linearity and residuals curve(s). Min and Max Points are limits for plot (as point numbers). Min and Max Spec are x-limits to plot specifications ( as point numbers). report ( self ) Write report file. azcam_testers.metrology.Metrology Metrology analysis. This class analyzes a grid of (x,y,z) image surface points. __init__ ( self ) special analyze ( self , filename = None ) Analyze existing metrology data. find_file ( self , filename ) Find a filename startign with filename. plot ( self ) Make metrology plots. read_data ( self , filename = '' ) report ( self ) Write report file. azcam_testers.pocketpump.PocketPump Pocket pumping (trap) acquisition and analysis. __init__ ( self ) special acquire ( self ) Make a pocket pump image sequence. acquire_arc ( self ) Make a pocket pump image sequence. acquire_archon ( self ) Make a pocket pump image sequence. analyze ( self ) Analys a pocket pump image sequence. Not yet supported. azcam_testers.prnu.Prnu Photo-Response Non-Uniformity (PRNU) acquisition and analysis. __init__ ( self ) special acquire ( self ) Acquire a bias image and one or more flats for PRNU analysis. ExposureTimes and Wavelengths are read from ExposuresFile text file. analyze ( self ) Analyze an existing PRNU image sequence for LSST. copy_data_files ( self , folder = '' ) Copy data files to proper report folder. report ( self ) Write dark report file. azcam_testers.ptc.Ptc Photon Transfer Curve acquisition and analysis. __init__ ( self ) special acquire ( self ) Acquire a bias image and a series of flats for a Photon Transfer Curve (PTC). ExposureTimes is a list of exposure times for each pair. analyze ( self ) Analyze an exisiting series of flats and create a Photon Transfer Curve (PTC) table. plot ( self , logplot = 0 ) Plot a Photon Transfer Curve from ptc.means, ptc.sdevs, ptc.gains. This version makes one plot with multiple line types and colors (not subplots). If logplot is True, plot is noise vs signal on log plot. If logplot is False, plot is variance vs signal on linear plot. report ( self ) Write report file. azcam_testers.qe.Qe Quantum Efficiency (QE) acquisition and analysis. __init__ ( self ) special acquire ( self ) Acquire a series of flats for QE measurement. Assumes timing code and binning is set as desired. analyze ( self ) Analyze an exisiting QE series of flats. Includes Newport power meter calibration. plot ( self ) Plot QE data. report ( self ) Make report files. azcam_testers.ramp.Ramp Ramp image acquisition and analysis for fast PTC measurements. __init__ ( self ) special acquire ( self ) Acquire ramp images (one bias, two ramps). analyze ( self , MaxRow =- 1 ) Analyze an exisiting series of ramp images. measure ( self , Zero , Ramp1 , Ramp2 ) Calculate ptc data from a bias and two ramp images. plot ( self ) Plot ramp data from ptc.means, ptc.sdevs, ptc.gains. This version plots on a log-log scale. This version makes one plot with multiple line types and colors (not subplots). azcam_testers.superflat.Superflat Flat field image acquisition and analysis. __init__ ( self ) special acquire ( self ) Acquire a set of flat field images. analyze ( self ) Analyze an existing SuperFlat image sequence for LSST.","title":"Tester Classes"},{"location":"testers/#tester-classes","text":"These classes acquire and analyze image sensor characterization data. Usage Example: from azcam_testers import bias bias . acquire () bias . analyze ()","title":"Tester Classes"},{"location":"testers/#tester","text":"","title":"Tester"},{"location":"testers/#azcam_testers.basetester","text":"","title":"basetester"},{"location":"testers/#azcam_testers.basetester.Tester","text":"Base class inherited by all tester classes.","title":"Tester"},{"location":"testers/#azcam_testers.detchar","text":"","title":"detchar"},{"location":"testers/#azcam_testers.detchar.DetChar","text":"Base DetChar class.","title":"DetChar"},{"location":"testers/#azcam_testers.bias.Bias","text":"Bias (zero) image acquisition and analysis.","title":"Bias"},{"location":"testers/#azcam_testers.bias.Bias.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.bias.Bias.acquire","text":"Acquire bias image sets for bias measurement.","title":"acquire()"},{"location":"testers/#azcam_testers.bias.Bias.analyze","text":"Analyze an existing bias series. Creates a superbias and a debiased image. The superbias image is the median combined iamge and the debiased image is then overscan corrected.","title":"analyze()"},{"location":"testers/#azcam_testers.bias.Bias.report","text":"Write bias report file.","title":"report()"},{"location":"testers/#azcam_testers.dark.Dark","text":"Dark signal acquisition and analysis.","title":"Dark"},{"location":"testers/#azcam_testers.dark.Dark.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.dark.Dark.acquire","text":"Acquire dark image sets (1 sec dark, long dark) for a dark current measurement. NumberImages is the number of iamge sets to take. ExposureTime is the exposure time of dark image in seconds.","title":"acquire()"},{"location":"testers/#azcam_testers.dark.Dark.analyze","text":"Analyze an exisiting series zeros and darks for dark current measurement.","title":"analyze()"},{"location":"testers/#azcam_testers.dark.Dark.plot","text":"Plot analysis results.","title":"plot()"},{"location":"testers/#azcam_testers.dark.Dark.report","text":"Write report file.","title":"report()"},{"location":"testers/#azcam_testers.defects.Defects","text":"Find and quantify image azcam.api.defects.","title":"Defects"},{"location":"testers/#azcam_testers.defects.Defects.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.defects.Defects.analyze","text":"Find dark defects in a flat/superflat image.","title":"analyze()"},{"location":"testers/#azcam_testers.defects.Defects.analyze_bright_defects","text":"Find bright defects in dark signal image.","title":"analyze_bright_defects()"},{"location":"testers/#azcam_testers.defects.Defects.analyze_dark_defects","text":"Find dark defects in a flat/superflat image.","title":"analyze_dark_defects()"},{"location":"testers/#azcam_testers.defects.Defects.copy_data_files","text":"Copy data files to proper report folder.","title":"copy_data_files()"},{"location":"testers/#azcam_testers.defects.Defects.find_section","text":"Find the section the group of bad pixels resides in based off a coordinate in the group. Can be used for any number of horizontal and vertical sections.","title":"find_section()"},{"location":"testers/#azcam_testers.defects.Defects.get_defect_coords","text":"Get the coordinates [col,row] of defects, not including edge mask.","title":"get_defect_coords()"},{"location":"testers/#azcam_testers.defects.Defects.make_bright_defects_report","text":"Write bright defects report file.","title":"make_bright_defects_report()"},{"location":"testers/#azcam_testers.defects.Defects.make_dark_defects_report","text":"Write dark defects report file.","title":"make_dark_defects_report()"},{"location":"testers/#azcam_testers.defects.Defects.make_defects_mask","text":"Create a single mask from Edge Mask, Bright mask, and Dark mask. Execute AFTER dark and bright defects are found.","title":"make_defects_mask()"},{"location":"testers/#azcam_testers.defects.Defects.make_edge_mask","text":"Creates a masked image from ImageBuffer which has its edges masked. Inp: EdgeSize (or self.EdgeSize) is the integer number of pixels closest to edge to mask. Out: self.MaskedImage is a numpy masked image array with edges masked set to True. Out: self.EdgeMask is the numpy mask array associated with self. MaskedImage.","title":"make_edge_mask()"},{"location":"testers/#azcam_testers.defects.Defects.plot_defects_mask","text":"Plot the defective pixel mask.","title":"plot_defects_mask()"},{"location":"testers/#azcam_testers.defects.Defects.read_defects_mask","text":"Read a defects mask (FITS format).","title":"read_defects_mask()"},{"location":"testers/#azcam_testers.defects.Defects.report","text":"Write defects report file for Bright and Dark. Run only after all analysis has been completed.","title":"report()"},{"location":"testers/#azcam_testers.detcal.DetCal","text":"Detector calibration routines to: - find and set video offsets - find exposure levels in DN and electrons at specified wavelengths - find system gains - read diode flux calibration data","title":"DetCal"},{"location":"testers/#azcam_testers.detcal.DetCal.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.detcal.DetCal.calibrate","text":"Use gain data to find offsets and gain. Take images at each wavelength to get count levels. If no wavelength are specified, only calibrate current wavelength","title":"calibrate()"},{"location":"testers/#azcam_testers.detcal.DetCal.read_datafile","text":"Read data file and set object as valid.","title":"read_datafile()"},{"location":"testers/#azcam_testers.eper.Eper","text":"EPER - Extended Pixel Edge Response analysis.","title":"Eper"},{"location":"testers/#azcam_testers.eper.Eper.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.eper.Eper.acquire","text":"Not supported, use superflat image set","title":"acquire()"},{"location":"testers/#azcam_testers.eper.Eper.analyze","text":"Analyze an exisiting SuperFlat image set for EPER.","title":"analyze()"},{"location":"testers/#azcam_testers.eper.Eper.report","text":"Write report file.","title":"report()"},{"location":"testers/#azcam_testers.fe55.Fe55","text":"Fe55 X-ray signal acquisition and analysis.","title":"Fe55"},{"location":"testers/#azcam_testers.fe55.Fe55.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.fe55.Fe55.acquire","text":"Acquire x-ray images for a CTE, gain, and noise measurements. NumberImages is the number of images to take. ExposureTime is the exposure time of x-ray image in seconds.","title":"acquire()"},{"location":"testers/#azcam_testers.fe55.Fe55.analyze","text":"Analyze an exisiting Fe55 image sequence or a single image.","title":"analyze()"},{"location":"testers/#azcam_testers.fe55.Fe55.plot","text":"Make plots.","title":"plot()"},{"location":"testers/#azcam_testers.fe55.Fe55.report","text":"Write dark report file.","title":"report()"},{"location":"testers/#azcam_testers.gain.Gain","text":"Acquire and analyze gain (PTC point) data.","title":"Gain"},{"location":"testers/#azcam_testers.gain.Gain.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.gain.Gain.acquire","text":"Acquire a bias image and two flat field images to generate a PTC point. ExposureTime is the exposure time in seconds.","title":"acquire()"},{"location":"testers/#azcam_testers.gain.Gain.analyze","text":"Analyze a bias image and two flat field images to generate a PTC point.","title":"analyze()"},{"location":"testers/#azcam_testers.gain.Gain.fe55_gain","text":"Set gain.system_gain to azcam.api.fe55.system_gain values.","title":"fe55_gain()"},{"location":"testers/#azcam_testers.gain.Gain.find","text":"Acquire and Analyze a PTC point for find gain, noise, scale, and offset. Does not create a report during analysis.","title":"find()"},{"location":"testers/#azcam_testers.gain.Gain.get_system_gain","text":"Returns the system gain.","title":"get_system_gain()"},{"location":"testers/#azcam_testers.gain.Gain.measure_gain","text":"Calculate gain and noise from a bias and photon transfer image pair.","title":"measure_gain()"},{"location":"testers/#azcam_testers.gain.Gain.report","text":"Make report files.","title":"report()"},{"location":"testers/#azcam_testers.linearity.Linearity","text":"Linearity acquisition and analysis.","title":"Linearity"},{"location":"testers/#azcam_testers.linearity.Linearity.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.linearity.Linearity.acquire","text":"Acquire a series of flats at increasing exposure levels to determine lnearity. Assumes that filename, timing code, and binning are already set as desired. NumberExposures is the number of exposure levels in sequence max_exposure is the maximum exposure time in seconds.","title":"acquire()"},{"location":"testers/#azcam_testers.linearity.Linearity.analyze","text":"Analyze a series of flats which have already been taken for linearity.","title":"analyze()"},{"location":"testers/#azcam_testers.linearity.Linearity.fit_linearity","text":"Calculate residuals from linearity data. Creates linearity.txt file.","title":"fit_linearity()"},{"location":"testers/#azcam_testers.linearity.Linearity.plot","text":"Plot linearity and residuals curve(s). Min and Max Points are limits for plot (as point numbers). Min and Max Spec are x-limits to plot specifications ( as point numbers).","title":"plot()"},{"location":"testers/#azcam_testers.linearity.Linearity.report","text":"Write report file.","title":"report()"},{"location":"testers/#azcam_testers.metrology.Metrology","text":"Metrology analysis. This class analyzes a grid of (x,y,z) image surface points.","title":"Metrology"},{"location":"testers/#azcam_testers.metrology.Metrology.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.metrology.Metrology.analyze","text":"Analyze existing metrology data.","title":"analyze()"},{"location":"testers/#azcam_testers.metrology.Metrology.find_file","text":"Find a filename startign with filename.","title":"find_file()"},{"location":"testers/#azcam_testers.metrology.Metrology.plot","text":"Make metrology plots.","title":"plot()"},{"location":"testers/#azcam_testers.metrology.Metrology.read_data","text":"","title":"read_data()"},{"location":"testers/#azcam_testers.metrology.Metrology.report","text":"Write report file.","title":"report()"},{"location":"testers/#azcam_testers.pocketpump.PocketPump","text":"Pocket pumping (trap) acquisition and analysis.","title":"PocketPump"},{"location":"testers/#azcam_testers.pocketpump.PocketPump.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.pocketpump.PocketPump.acquire","text":"Make a pocket pump image sequence.","title":"acquire()"},{"location":"testers/#azcam_testers.pocketpump.PocketPump.acquire_arc","text":"Make a pocket pump image sequence.","title":"acquire_arc()"},{"location":"testers/#azcam_testers.pocketpump.PocketPump.acquire_archon","text":"Make a pocket pump image sequence.","title":"acquire_archon()"},{"location":"testers/#azcam_testers.pocketpump.PocketPump.analyze","text":"Analys a pocket pump image sequence. Not yet supported.","title":"analyze()"},{"location":"testers/#azcam_testers.prnu.Prnu","text":"Photo-Response Non-Uniformity (PRNU) acquisition and analysis.","title":"Prnu"},{"location":"testers/#azcam_testers.prnu.Prnu.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.prnu.Prnu.acquire","text":"Acquire a bias image and one or more flats for PRNU analysis. ExposureTimes and Wavelengths are read from ExposuresFile text file.","title":"acquire()"},{"location":"testers/#azcam_testers.prnu.Prnu.analyze","text":"Analyze an existing PRNU image sequence for LSST.","title":"analyze()"},{"location":"testers/#azcam_testers.prnu.Prnu.copy_data_files","text":"Copy data files to proper report folder.","title":"copy_data_files()"},{"location":"testers/#azcam_testers.prnu.Prnu.report","text":"Write dark report file.","title":"report()"},{"location":"testers/#azcam_testers.ptc.Ptc","text":"Photon Transfer Curve acquisition and analysis.","title":"Ptc"},{"location":"testers/#azcam_testers.ptc.Ptc.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.ptc.Ptc.acquire","text":"Acquire a bias image and a series of flats for a Photon Transfer Curve (PTC). ExposureTimes is a list of exposure times for each pair.","title":"acquire()"},{"location":"testers/#azcam_testers.ptc.Ptc.analyze","text":"Analyze an exisiting series of flats and create a Photon Transfer Curve (PTC) table.","title":"analyze()"},{"location":"testers/#azcam_testers.ptc.Ptc.plot","text":"Plot a Photon Transfer Curve from ptc.means, ptc.sdevs, ptc.gains. This version makes one plot with multiple line types and colors (not subplots). If logplot is True, plot is noise vs signal on log plot. If logplot is False, plot is variance vs signal on linear plot.","title":"plot()"},{"location":"testers/#azcam_testers.ptc.Ptc.report","text":"Write report file.","title":"report()"},{"location":"testers/#azcam_testers.qe.Qe","text":"Quantum Efficiency (QE) acquisition and analysis.","title":"Qe"},{"location":"testers/#azcam_testers.qe.Qe.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.qe.Qe.acquire","text":"Acquire a series of flats for QE measurement. Assumes timing code and binning is set as desired.","title":"acquire()"},{"location":"testers/#azcam_testers.qe.Qe.analyze","text":"Analyze an exisiting QE series of flats. Includes Newport power meter calibration.","title":"analyze()"},{"location":"testers/#azcam_testers.qe.Qe.plot","text":"Plot QE data.","title":"plot()"},{"location":"testers/#azcam_testers.qe.Qe.report","text":"Make report files.","title":"report()"},{"location":"testers/#azcam_testers.ramp.Ramp","text":"Ramp image acquisition and analysis for fast PTC measurements.","title":"Ramp"},{"location":"testers/#azcam_testers.ramp.Ramp.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.ramp.Ramp.acquire","text":"Acquire ramp images (one bias, two ramps).","title":"acquire()"},{"location":"testers/#azcam_testers.ramp.Ramp.analyze","text":"Analyze an exisiting series of ramp images.","title":"analyze()"},{"location":"testers/#azcam_testers.ramp.Ramp.measure","text":"Calculate ptc data from a bias and two ramp images.","title":"measure()"},{"location":"testers/#azcam_testers.ramp.Ramp.plot","text":"Plot ramp data from ptc.means, ptc.sdevs, ptc.gains. This version plots on a log-log scale. This version makes one plot with multiple line types and colors (not subplots).","title":"plot()"},{"location":"testers/#azcam_testers.superflat.Superflat","text":"Flat field image acquisition and analysis.","title":"Superflat"},{"location":"testers/#azcam_testers.superflat.Superflat.__init__","text":"","title":"__init__()"},{"location":"testers/#azcam_testers.superflat.Superflat.acquire","text":"Acquire a set of flat field images.","title":"acquire()"},{"location":"testers/#azcam_testers.superflat.Superflat.analyze","text":"Analyze an existing SuperFlat image sequence for LSST.","title":"analyze()"}]}